#include <WiFi.h>
#include <HTTPClient.h>

// Wi-Fi credentials
const char* ssid = "Galaxy A54 5G 2390";  // Replace with your hotspot SSID
const char* password = "SHreza1997";  // Replace with your hotspot password

// Raspberry Pi server details
const char* serverURL = "http://192.168.3.215:5000/upload";  // Replace with Raspberry Pi IP

// Define the VP pin (ADC1_CH0, GPIO36)
#define ANALOG_PIN 36  // VP pin on ESP32

void setup() {
  Serial.begin(115200);
  
  // Initialize Wi-Fi connection
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to Wi-Fi!");
  Serial.print("ESP32 IP Address: ");
  Serial.println(WiFi.localIP());

  // Configure the ADC pin
  pinMode(ANALOG_PIN, INPUT);
}

void loop() {
  // Read the analog signal from the AD8283 (ECG signal)
  int adcValue = analogRead(ANALOG_PIN);
  float voltage = (adcValue * 3.3) / 4095.0;  // Convert to voltage (optional)

  // Send the ADC value to the server
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverURL);

    // Set the header for form data
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    // Prepare data
    String postData = "adc_value=" + String(adcValue);

    // Debug: Print the data being sent
    Serial.print("Sending POST data: ");
    Serial.println(postData);

    // Send POST request
    int httpResponseCode = http.POST(postData);

    // Print server response
    if (httpResponseCode > 0) {
      Serial.print("Server Response: ");
      Serial.println(httpResponseCode);
    } else {
      Serial.print("Error: ");
      Serial.println(http.errorToString(httpResponseCode));
    }

    http.end();
  } else {
    Serial.println("Wi-Fi disconnected!");
  }

  // Short delay to control the sampling rate (~5ms per sample for ~200Hz sampling rate)
  delay(100);
}

